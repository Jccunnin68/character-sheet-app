# External Secrets Configuration for AWS Secrets Manager
# This file configures External Secrets Operator to pull secrets from AWS Secrets Manager
# instead of storing them in the codebase

# SecretStore - Configures connection to AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager-store
  namespace: character-sheet
  labels:
    app: character-sheet
  annotations:
    description: "AWS Secrets Manager connection for character-sheet application"
spec:
  provider:
    aws:
      service: SecretsManager
      region: "AWS_REGION_PLACEHOLDER"  # Will be replaced by deployment script
      # Use IAM roles for service accounts (IRSA) for authentication
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa

---
# Service Account for External Secrets Operator
# This service account will be annotated with IAM role for AWS access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: character-sheet
  labels:
    app: character-sheet
  annotations:
    # This annotation will be set by the deployment script with the actual IAM role ARN
    eks.amazonaws.com/role-arn: "IAM_ROLE_ARN_PLACEHOLDER"

---
# External Secret for PostgreSQL
# This ExternalSecret pulls database credentials from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-external-secret
  namespace: character-sheet
  labels:
    app: postgres
    component: database
  annotations:
    description: "External secret for PostgreSQL credentials from AWS Secrets Manager"
spec:
  # Refresh interval - how often to sync from AWS Secrets Manager
  refreshInterval: 15s
  
  # Secret store reference
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  
  # Target Kubernetes secret to create
  target:
    name: postgres-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app: postgres
          component: database
      data:
        # Database password from AWS Secrets Manager
        POSTGRES_PASSWORD: "{{ .postgres_password | toString }}"
        
        # Construct DATABASE_URL from individual components
        DATABASE_URL: "postgresql://{{ .postgres_user | toString }}:{{ .postgres_password | toString }}@postgres-service:5432/{{ .postgres_db | toString }}?sslmode=disable"
  
  # Data to pull from AWS Secrets Manager
  data:
  - secretKey: postgres_password
    remoteRef:
      key: character-sheet/database
      property: password
      
  - secretKey: postgres_user
    remoteRef:
      key: character-sheet/database
      property: username
      
  - secretKey: postgres_db
    remoteRef:
      key: character-sheet/database
      property: database

---
# External Secret for Backend Application
# Pulls JWT secrets and other application configuration from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backend-external-secret
  namespace: character-sheet
  labels:
    app: backend
    component: api
  annotations:
    description: "External secret for backend API credentials from AWS Secrets Manager"
spec:
  # Refresh interval
  refreshInterval: 15s
  
  # Secret store reference
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  
  # Target Kubernetes secret
  target:
    name: backend-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app: backend
          component: api
      data:
        # JWT secret for token signing
        JWT_SECRET: "{{ .jwt_secret | toString }}"
        
        # Optional: API keys or other secrets
        API_KEY: "{{ .api_key | toString | default \"\" }}"
  
  # Data to pull from AWS Secrets Manager
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: character-sheet/backend
      property: jwt_secret
      
  - secretKey: api_key
    remoteRef:
      key: character-sheet/backend
      property: api_key 