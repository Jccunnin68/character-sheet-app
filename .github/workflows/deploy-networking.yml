# GitHub Actions Workflow for Networking and Shared Infrastructure
# This workflow deploys shared networking components and ECR repository
# Triggered manually or by changes to shared infrastructure

name: Deploy Networking and Shared Infrastructure

on:
  push:
    branches: [main, production]
    paths:
      - 'terraform/shared-infrastructure/**'
      - '.github/workflows/deploy-networking.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy
      create_state_bucket:
        description: 'Create Terraform state bucket'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2
  TERRAFORM_VERSION: 1.6.0

jobs:
  deploy-shared-infrastructure:
    name: Deploy Shared Infrastructure
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    environment:
      name: shared-infrastructure
      url: https://console.aws.amazon.com/ecr/repositories

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials for shared account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_SHARED_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-SharedInfra
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Prepare shared infrastructure configuration
      run: |
        cd terraform/shared-infrastructure
        
        # Copy configuration
        cp terraform.tfvars terraform.tfvars.backup
        
        # Replace placeholders with actual values
        sed -i "s/DEV_ACCOUNT_ID_PLACEHOLDER/${{ secrets.DEV_ACCOUNT_ID }}/g" terraform.tfvars
        sed -i "s/PREPROD_ACCOUNT_ID_PLACEHOLDER/${{ secrets.PREPROD_ACCOUNT_ID }}/g" terraform.tfvars
        sed -i "s/PROD_ACCOUNT_ID_PLACEHOLDER/${{ secrets.PROD_ACCOUNT_ID }}/g" terraform.tfvars
        
        # Update state bucket creation flag
        if [ "${{ github.event.inputs.create_state_bucket }}" == "true" ]; then
          sed -i "s/create_terraform_state_bucket = false/create_terraform_state_bucket = true/g" terraform.tfvars
        fi

    - name: Terraform Init
      run: |
        cd terraform/shared-infrastructure
        terraform init

    - name: Terraform Validate
      run: |
        cd terraform/shared-infrastructure
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform/shared-infrastructure
        terraform plan -detailed-exitcode -out=tfplan
      continue-on-error: true

    - name: Terraform Apply
      if: (github.event.inputs.action == 'apply' || github.event.inputs.action == '') && steps.plan.outcome == 'success'
      run: |
        cd terraform/shared-infrastructure
        echo "üöÄ Applying shared infrastructure changes..."
        terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd terraform/shared-infrastructure
        echo "‚ö†Ô∏è Destroying shared infrastructure..."
        terraform destroy -auto-approve

    - name: Get shared infrastructure outputs
      if: github.event.inputs.action != 'destroy'
      id: outputs
      run: |
        cd terraform/shared-infrastructure
        
        echo "ecr_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "shared_account_id=$(terraform output -raw shared_account_id)" >> $GITHUB_OUTPUT
        echo "aws_region=$(terraform output -raw aws_region)" >> $GITHUB_OUTPUT

    - name: Verify ECR repository access
      if: github.event.inputs.action != 'destroy'
      run: |
        echo "üîç Verifying ECR repository..."
        
        # Test ECR login
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ steps.outputs.outputs.ecr_url }}
        
        # List repositories
        aws ecr describe-repositories --region ${{ env.AWS_REGION }}

    - name: Test cross-account ECR access
      if: github.event.inputs.action != 'destroy'
      run: |
        echo "üîç Testing cross-account ECR access..."
        
        # Test that the repository policy allows cross-account access
        aws ecr get-repository-policy --repository-name character-sheet-backend --region ${{ env.AWS_REGION }} || echo "No repository policy found"

  update-environment-configs:
    name: Update Environment Configurations
    runs-on: ubuntu-latest
    needs: [deploy-shared-infrastructure]
    if: needs.deploy-shared-infrastructure.result == 'success' && github.event.inputs.action != 'destroy'
    
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update environment configurations with ECR URL
      run: |
        # Update ECR URLs in environment configurations
        ECR_URL="${{ needs.deploy-shared-infrastructure.outputs.ecr_url }}"
        SHARED_ACCOUNT_ID="${{ needs.deploy-shared-infrastructure.outputs.shared_account_id }}"
        AWS_REGION="${{ needs.deploy-shared-infrastructure.outputs.aws_region }}"
        
        echo "üìù Updating environment configurations..."
        
        # Update dev environment
        sed -i "s|ecr_repository_url = \".*\"|ecr_repository_url = \"${ECR_URL}\"|g" terraform/environments/dev/terraform.tfvars
        sed -i "s/SHARED_ACCOUNT_ID_PLACEHOLDER/${SHARED_ACCOUNT_ID}/g" terraform/environments/dev/terraform.tfvars
        
        # Update preprod environment
        sed -i "s|ecr_repository_url = \".*\"|ecr_repository_url = \"${ECR_URL}\"|g" terraform/environments/preprod/terraform.tfvars
        sed -i "s/SHARED_ACCOUNT_ID_PLACEHOLDER/${SHARED_ACCOUNT_ID}/g" terraform/environments/preprod/terraform.tfvars
        
        # Update prod environment
        sed -i "s|ecr_repository_url = \".*\"|ecr_repository_url = \"${ECR_URL}\"|g" terraform/environments/prod/terraform.tfvars
        sed -i "s/SHARED_ACCOUNT_ID_PLACEHOLDER/${SHARED_ACCOUNT_ID}/g" terraform/environments/prod/terraform.tfvars
        
        # Update GitHub Actions workflows
        sed -i "s|SHARED_ACCOUNT_ID_PLACEHOLDER|${SHARED_ACCOUNT_ID}|g" .github/workflows/deploy-dev-preprod.yml
        sed -i "s|SHARED_ACCOUNT_ID_PLACEHOLDER|${SHARED_ACCOUNT_ID}|g" .github/workflows/deploy-production.yml

    - name: Create Pull Request with updates
      if: github.event_name == 'workflow_dispatch'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update environment configs with shared infrastructure outputs"
        title: "Update environment configurations with shared infrastructure"
        body: |
          ## üîÑ Infrastructure Configuration Update
          
          This PR updates environment configurations with outputs from shared infrastructure deployment:
          
          - **ECR Repository URL**: `${{ needs.deploy-shared-infrastructure.outputs.ecr_url }}`
          - **Shared Account ID**: `${{ needs.deploy-shared-infrastructure.outputs.shared_account_id }}`
          - **AWS Region**: `${{ needs.deploy-shared-infrastructure.outputs.aws_region }}`
          
          ### Changes Made:
          - ‚úÖ Updated `terraform/environments/*/terraform.tfvars` with ECR repository URL
          - ‚úÖ Updated GitHub Actions workflows with shared account ID
          - ‚úÖ Replaced placeholders with actual infrastructure values
          
          ### Next Steps:
          1. Review and merge this PR
          2. Deploy to environments using updated configurations
          
          _Auto-generated by networking deployment workflow_
        branch: update-shared-infrastructure-config
        delete-branch: true

  deployment-summary:
    name: Shared Infrastructure Summary
    runs-on: ubuntu-latest
    needs: [deploy-shared-infrastructure, update-environment-configs]
    if: always()

    steps:
    - name: Deployment Summary
      run: |
        echo "## üåê Shared Infrastructure Deployment Summary"
        echo ""
        
        if [ "${{ needs.deploy-shared-infrastructure.result }}" == "success" ]; then
          echo "‚úÖ **Shared Infrastructure**: Deployment successful"
          
          if [ "${{ github.event.inputs.action }}" != "destroy" ]; then
            echo "üì¶ **ECR Repository**: ${{ needs.deploy-shared-infrastructure.outputs.ecr_url }}"
            echo "üè† **Shared Account**: ${{ needs.deploy-shared-infrastructure.outputs.shared_account_id }}"
            echo "üåç **Region**: ${{ needs.deploy-shared-infrastructure.outputs.aws_region }}"
          fi
        else
          echo "‚ùå **Shared Infrastructure**: Deployment failed"
        fi
        
        if [ "${{ needs.update-environment-configs.result }}" == "success" ]; then
          echo "‚úÖ **Configuration Update**: Environment configs updated successfully"
        elif [ "${{ needs.update-environment-configs.result }}" == "skipped" ]; then
          echo "‚è≠Ô∏è **Configuration Update**: Skipped"
        else
          echo "‚ùå **Configuration Update**: Failed"
        fi
        
        echo ""
        echo "### üîß Next Steps"
        
        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          echo "- ‚ö†Ô∏è Shared infrastructure has been destroyed"
          echo "- Update environment configurations to remove references"
          echo "- Redeploy shared infrastructure before deploying applications"
        else
          echo "- Deploy to environments using updated configurations"
          echo "- Monitor ECR repository: AWS Console ‚Üí ECR ‚Üí Repositories"
          echo "- Verify cross-account access from dev/preprod/prod accounts"
        fi
        
        echo ""
        echo "### üìä Resource Overview"
        echo "- **ECR Repository**: character-sheet-backend"
        echo "- **Cross-account access**: Dev, PreProd, Production accounts"
        echo "- **Image lifecycle**: Automated cleanup policies configured"
        echo "- **Monitoring**: CloudWatch logs for shared services" 